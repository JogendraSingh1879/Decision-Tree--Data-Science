# -*- coding: utf-8 -*-
"""Decison_Tree_C5_Cart AS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FqB2IEQWrXyaPeeRZjX9NfjSEPpGjB9D
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import classification_report
from sklearn import preprocessing

"""Import DATA"""

data = pd.read_csv('heart.csv')

data.head()

data['output'].value_counts()

#Complete Heart dataset
label_encoder = preprocessing.LabelEncoder()
data['output']= label_encoder.fit_transform(data['output'])

data['output'].value_counts()

data.iloc[:,0:13]

x=data.iloc[:,0:13]
y=data['output']

x

y

data['output'].unique()

data.output.value_counts()

data.columns

colnames = list(data.columns)

colnames

# Splitting data into training and testing data set
x_train, x_test,y_train,y_test = train_test_split(x,y, test_size=0.2,random_state=45)

x_train

y_train

"""Building Decision Tree Classifier using Entropy Criteria"""

model = DecisionTreeClassifier(criterion = 'entropy',max_depth=3)
model.fit(x_train,y_train)

#PLot the decision tree
tree.plot_tree(model);

y_train.value_counts()

fn=['age', 'sex', 'cp', 'trtbps', 'chol', 'fbs', 'restecg', 'thalachh',
       'exng', 'oldpeak', 'slp', 'caa', 'thall', 'output']
cn=['1', '0']
fig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=300)
tree.plot_tree(model,
               feature_names = fn,
               class_names=cn,
               filled = True);

#Predicting on test data
preds = model.predict(x_test) # predicting on test data set
pd.Series(preds).value_counts() # getting the count of each category

y_test

preds

pd.crosstab(y_test,preds) # getting the 2 way table to understand the correct and wrong predictions

# Accuracy
np.mean(preds==y_test)

y_test[127:]

"""Building Decision Tree Classifier (CART) using Gini Criteria"""

from sklearn.tree import DecisionTreeClassifier
model_gini = DecisionTreeClassifier(criterion='gini', max_depth=3)

model_gini.fit(x_train, y_train)

#Prediction and computing the accuracy
pred=model.predict(x_test)
np.mean(preds==y_test)

"""Decision Tree Regression Example"""

# Decision Tree Regression
from sklearn.tree import DecisionTreeRegressor

array = data.values
X = array[:,0:13]
y = array[:,13]

array

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=100)

model = DecisionTreeRegressor()
model.fit(X_train, y_train)

#Find the accuracy
model.score(X_test,y_test)